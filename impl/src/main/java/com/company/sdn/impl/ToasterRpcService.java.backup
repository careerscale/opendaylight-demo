/*
 * Copyright Â© 2016 No rights reserved and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package com.company.sdn.impl;

import java.io.Closeable;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicReference;

import org.opendaylight.controller.md.sal.binding.api.DataBroker;
import org.opendaylight.controller.md.sal.binding.api.NotificationPublishService;
import org.opendaylight.controller.md.sal.binding.api.ReadWriteTransaction;
import org.opendaylight.controller.md.sal.common.api.TransactionStatus;
import org.opendaylight.controller.md.sal.common.api.data.LogicalDatastoreType;
import org.opendaylight.controller.md.sal.common.api.data.OptimisticLockFailedException;
import org.opendaylight.controller.sal.binding.api.BindingAwareBroker.RpcRegistration;
import org.opendaylight.controller.sal.binding.api.RpcProviderRegistry;
import org.opendaylight.controller.sal.common.util.RpcErrors;
import org.opendaylight.controller.sal.common.util.Rpcs;
import org.opendaylight.yang.gen.v1.http.netconfcentral.org.ns.toaster.rev091120.MakeToastInput;
import org.opendaylight.yang.gen.v1.http.netconfcentral.org.ns.toaster.rev091120.RestockToasterInput;
import org.opendaylight.yang.gen.v1.http.netconfcentral.org.ns.toaster.rev091120.Toaster.ToasterStatus;
import org.opendaylight.yang.gen.v1.http.netconfcentral.org.ns.toaster.rev091120.ToasterService;
import org.opendaylight.yangtools.yang.binding.DataObject;
import org.opendaylight.yangtools.yang.common.RpcError;
import org.opendaylight.yangtools.yang.common.RpcError.ErrorSeverity;
import org.opendaylight.yangtools.yang.common.RpcError.ErrorType;
import org.opendaylight.yangtools.yang.common.RpcResult;
import org.opendaylight.yangtools.yang.common.RpcResultBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Optional;
import com.google.common.util.concurrent.AsyncFunction;
import com.google.common.util.concurrent.FutureCallback;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.SettableFuture;

public class ToasterRpcService implements ToasterService, Closeable {

	private final DataBroker dataBroker;
	private NotificationPublishService notificationPublishService;
	private RpcProviderRegistry rpcRegistry;
	RpcRegistration registration = null;
	
	private final ExecutorService executor;
	
	  private final AtomicReference<Future<?>> currentMakeToastTask = new AtomicReference<>();
	  
	private static final Logger LOG = LoggerFactory.getLogger(ToasterRpcService.class);

	public ToasterRpcService(DataBroker dataBroker, NotificationPublishService notificationPublishService,
			RpcProviderRegistry rpcRegistry) {
		this.dataBroker = dataBroker;
		this.notificationPublishService = notificationPublishService;
		this.rpcRegistry = rpcRegistry;
		LOG.info("Toaster RPC server is initialized now {} ", dataBroker);
		registration = this.rpcRegistry.addRpcImplementation(ToasterService.class, this);
		 executor = Executors.newFixedThreadPool(1);
		 
	}

	@Override
	public Future<RpcResult<Void>> restockToaster(RestockToasterInput input) {
		RpcResultBuilder<Void> response = RpcResultBuilder.success();
		return Futures.immediateFuture(response.build());
	}

	@Override
	public Future<RpcResult<Void>> makeToast(MakeToastInput input) {
		  final SettableFuture<RpcResult<Void>> futureResult = SettableFuture.create();
		  
	      checkStatusAndMakeToast( input, futureResult );
	 
	      return futureResult;
	      
	}

	@Override
	public Future<RpcResult<Void>> cancelToast() {
		//RpcResultBuilder<Void> response = RpcResultBuilder.success();
	//	return Futures.immediateFuture(response.build());
		
		RpcResultBuilder<Void> response = RpcResultBuilder.success();


	      Future<?> current = currentMakeToastTask.getAndSet( null );
	      if( current != null ) {
	          current.cancel( true );
	      }
	 
	      // Always return success from the cancel toast call.
	      return Futures.immediateFuture( Rpcs.<Void> getRpcResult( true,
	                                      Collections.<RpcError>emptyList() ) );
	}

	@Override
	public void close() throws IOException {
		registration.close();

	}

	private void checkStatusAndMakeToast(final MakeToastInput input,
			final SettableFuture<RpcResult<Void>> futureResult) {

		// Read the ToasterStatus and, if currently Up, try to write the status
		// to Down.
		// If that succeeds, then we essentially have an exclusive lock and can
		// proceed
		// to make toast.

		final ReadWriteTransaction tx = dataBroker.newReadWriteTransaction();
		ListenableFuture<Optional<DataObject>> readFuture = tx.read(LogicalDatastoreType.OPERATIONAL, TOASTER_IID);

		final ListenableFuture<RpcResult<TransactionStatus>> commitFuture = Futures.transform(readFuture,
				new AsyncFunction<Optional<DataObject>, RpcResult<TransactionStatus>>() {

					@Override
					public ListenableFuture<RpcResult<TransactionStatus>> apply(Optional<DataObject> toasterData)
							throws Exception {

						ToasterStatus toasterStatus = ToasterStatus.Up;
						if (toasterData.isPresent()) {
							toasterStatus = ((Toaster) toasterData.get()).getToasterStatus();
						}

						LOG.debug("Read toaster status: {}", toasterStatus);

						if (toasterStatus == ToasterStatus.Up) {

							LOG.debug("Setting Toaster status to Down");

							// We're not currently making toast - try to update
							// the status to Down
							// to indicate we're going to make toast. This acts
							// as a lock to prevent
							// concurrent toasting.
							tx.put(LogicalDatastoreType.OPERATIONAL, TOASTER_IID, buildToaster(ToasterStatus.Down));
							return tx.commit();
						}

						LOG.debug("Oops - already making toast!");

						// Return an error since we are already making toast.
						// This will get
						// propagated to the commitFuture below which will
						// interpret the null
						// TransactionStatus in the RpcResult as an error
						// condition.
						return Futures.immediateFuture(
								Rpcs.<TransactionStatus> getRpcResult(false, null, makeToasterInUseError()));
					}
				});

		Futures.addCallback(commitFuture, new FutureCallback<RpcResult<TransactionStatus>>() {
			@Override
			public void onSuccess(RpcResult<TransactionStatus> result) {
				if (result.getResult() == TransactionStatus.COMMITED) {

					// OK to make toast
					currentMakeToastTask.set(executor.submit(new MakeToastTask(input, futureResult)));
				} else {

					LOG.debug("Setting error result");

					// Either the transaction failed to commit for some reason
					// or, more likely,
					// the read above returned ToasterStatus.Down. Either way,
					// fail the
					// futureResult and copy the errors.

					futureResult.set(Rpcs.<Void> getRpcResult(false, null, result.getErrors()));
				}
			}

			@Override
			public void onFailure(Throwable ex) {
				if (ex instanceof OptimisticLockFailedException) {

					// Another thread is likely trying to make toast
					// simultaneously and updated the
					// status before us. Try reading the status again - if
					// another make toast is
					// now in progress, we should get ToasterStatus.Down and
					// fail.

					LOG.debug("Got OptimisticLockFailedException - trying again");

					checkStatusAndMakeToast(input, futureResult);

				} else {

					LOG.error("Failed to commit Toaster status", ex);

					// Got some unexpected error so fail.
					futureResult.set(Rpcs.<Void> getRpcResult(false, null, Arrays.asList(RpcErrors.getRpcError(null,
							null, null, ErrorSeverity.ERROR, ex.getMessage(), ErrorType.APPLICATION, ex))));
				}
			}
		});
	}

	
	/*
private class MakeToastTask implements Callable<Void> {

final MakeToastInput toastRequest;
final SettableFuture<RpcResult<Void>> futureResult;

public MakeToastTask( final MakeToastInput toastRequest,
 final SettableFuture<RpcResult<Void>> futureResult ) {
this.toastRequest = toastRequest;
this.futureResult = futureResult;
}

@Override
public Void call() {
try
{
// make toast just sleeps for n seconds.
long darknessFactor = this.darknessFactor.get();
Thread.sleep(toastRequest.getToasterDoneness());
}
catch( InterruptedException e ) {
LOG.info( "Interrupted while making the toast" );
}

toastsMade.incrementAndGet();

amountOfBreadInStock.getAndDecrement();
if( outOfBread() ) {
LOG.info( "Toaster is out of bread!" );

notificationProvider.publish( new ToasterOutOfBreadBuilder().build() );
}

// Set the Toaster status back to up - this essentially releases the toasting lock.
// We can't clear the current toast task nor set the Future result until the
// update has been committed so we pass a callback to be notified on completion.

setToasterStatusUp( new Function<Boolean,Void>() {
@Override
public Void apply( Boolean result ) {

currentMakeToastTask.set( null );

LOG.debug("Toast done");

futureResult.set( Rpcs.<Void>getRpcResult( true, null,
                              Collections.<RpcError>emptyList() ) );

return null;
}
} );
return null;
}

*/

}
